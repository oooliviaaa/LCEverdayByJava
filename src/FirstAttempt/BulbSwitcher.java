package FirstAttempt;

public class BulbSwitcher {

	/**http://bookshadow.com/weblog/2015/12/19/leetcode-bulb-switcher/
	 * 对于第i栈灯泡，当i的因子个数为奇数时，最终会保持点亮状态，例如9的因子为1，3，9
	 * 而当i的因子个数为偶数时，最终会保持熄灭状态，例如8的因子为：1，2，4，8
	 * 当且仅当i为完全平方数时，其因子个数为奇数
	 * 为什么只有完全平方数的因子个数为奇数呢？
	 * 因为除了完全平方数，其余数字的因子都是成对出现的，而完全平方数的平方根只会统计一次。
	 * 所以这题转化为求n以内的完全平方数的个数
	 * 
	 * http://www.cnblogs.com/grandyang/p/5100098.html
	 * 对于第n个灯泡，只有当次数是n的因子的之后，才能改变灯泡的状态，即n能被当前次数整除
	 * 比如当n为36时，它的因数有(1,36), (2,18), (3,12), (4,9), (6,6), 
	 * 可以看到前四个括号里成对出现的因数各不相同，括号中前面的数改变了灯泡状态，后面的数又变回去了，等于锁的状态没有发生变化，
	 * 只有最后那个(6,6)，在次数6的时候改变了一次状态，没有对应其它的状态能将其变回去了，所以锁就一直是打开状态的。
	 * 所以所有平方数都有这么一个相等的因数对，即所有平方数的灯泡都将会是打开的状态。
	 * 那么问题就简化为了求1到n之间完全平方数的个数，我们可以用force brute来比较从1开始的完全平方数和n的大
	 * */
	public int bulbSwitch(int n) {
		return (int) Math.sqrt(n);
    }
}
